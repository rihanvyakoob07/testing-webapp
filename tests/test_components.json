```python
import json
import unittest
from unittest.mock import Mock, patch
from your_module import load_components  # Replace 'your_module' with actual module name

class TestComponentsJSON(unittest.TestCase):

    def setUp(self):
        self.components_json = 'components.json'

    def test_load_components_valid_json(self):
        with open(self.components_json, 'w') as f:
            json.dump({}, f)
        components = load_components(self.components_json)
        self.assertIsInstance(components, dict)
        self.assertEqual(components, {})

    def test_load_components_invalid_json(self):
        with open(self.components_json, 'w') as f:
            f.write('Invalid JSON')
        with self.assertRaises(json.JSONDecodeError):
            load_components(self.components_json)

    def test_load_components_non_existent_file(self):
        with self.assertRaises(FileNotFoundError):
            load_components('non_existent_file.json')

    def test_load_components_empty_file(self):
        with open(self.components_json, 'w') as f:
            pass
        components = load_components(self.components_json)
        self.assertIsInstance(components, dict)
        self.assertEqual(components, {})

if __name__ == '__main__':
    unittest.main()
```